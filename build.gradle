plugins {
    id 'java-library'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group = 'com.github.reducktion'
version = System.getenv('RELEASE_VERSION')

ext.projectRepository = 'github.com/reducktion/socrates-java'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

checkstyle {
    toolVersion '8.36.2'
    configFile file('config/checkstyle/checkstyle.xml')
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = group
                name = 'Socrates Java'
                description = 'Socrates allows you to validate and retrieve personal data from National Identification Numbers across the world.'
                url = 'https://' +  projectRepository
                from components.java

                licenses {
                    license {
                        name = 'MIT'
                        url =  'https://' + projectRepository + '/blob/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'reducktion'
                        name = 'Reducktion'
                        email = System.getenv('DEVELOPER_EMAIL')
                    }
                }

                scm {
                    connection = 'scm:git:https://' + projectRepository + '.git'
                    developerConnection = 'scm:git:git@' + projectRepository + '.git'
                    url = 'https://' + projectRepository
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}

signing {
    def signingKeyId = System.getenv('SIGNING_KEY_ID')
    def signingKey = System.getenv('SIGNING_KEY')
    def signingPassword = System.getenv('SIGNING_PASSWORD')
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
